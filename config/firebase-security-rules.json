{
  "rules": {
    "authentication": {
      "business": {
        "$uid": {
          // allow authenticated user to create his user record, cannot be modified or deleted
          ".write": "!data.exists() && newData.exists() && $uid === auth.uid",
          ".validate": "newData.hasChildren(['business_id', 'email'])",

          "business_id": {
            ".validate": "root.child('businesses/'+newData.val()).exists()" // TODO - nothing prevents two users from pointing to the same business, ie a new user snagging a business
          },

          "email": {
            ".validate": "newData.val() === auth.email"
          },

          "$other": { ".validate": false }
        }
      }
    },

    "businesses": {
      ".read": "true",

      "$business_id": {
        ".validate": "newData.hasChildren(['name', 'address'])",

        "name": {
          ".write": "!data.exists() || $business_id === root.child('authentication/business/'+auth.uid+'/business_id').val()",
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length < 45"
        },

        "address": {
          ".write": "!data.exists() || $business_id === root.child('authentication/business/'+auth.uid+'/business_id').val()",
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length < 100"
        },

        "spinnerShifts": {
          "$spinner_shift_id": {
            // The absence of a business_id .write rule is specifically so spinnerShifts cannot be deleted.
            // 1. allow creates, cannot modify or delete
            // 2. by the owning business
            // 3. where spinner_shift_id is a valid SpinnerShift
            ".write": "!data.exists() && newData.exists() && $business_id === root.child('authentication/business/'+auth.uid+'/business_id').val() && root.child('spinnerShifts/'+$spinner_shift_id).exists()",
            ".validate": "newData.isBoolean()"
          }
        },

        "$other": { ".validate": false }
      }
    },

    "spinnerShifts": {
      ".read": "true",

      "$spinner_shift_id": {
        // 1. create, but not update or delete, if the user owns this business
        // 2. delete if the user owns this business, and this business isn't associated with this spinnerShift, ie a dangling reference that needs to be cleaned up
        ".write": "(!data.exists() && newData.exists() && newData.child('business').val() === root.child('authentication/business/'+auth.uid+'/business_id').val()) ||
                   (data.exists() && !newData.exists() && data.child('business').val() === root.child('authentication/business/'+auth.uid+'/business_id').val() &&
                      !root.child('businesses/'+data.child('business').val()+'/spinnerShifts/'+$spinner_shift_id).exists())",
        ".validate": "newData.hasChildren(['business', 'startDateAndTime', 'endDateAndTime', 'state'])",

        "business": {
          ".validate": "root.child('businesses/' + newData.val()).exists()"
        },

        "startDateAndTime": {
          ".validate": "newData.isString() && newData.val().length > 0" // TBD - validate it's a date && start < end
        },

        "endDateAndTime": {
          ".validate": "newData.isString() && newData.val().length > 0" // TBD - validate it's a date && start < end
        },

        "state": {
          // TBD allow writes if user is a spinner and is setting the state from "unmatched" to "matched"
          ".validate": "newData.isString() && newData.val().length > 0" // TBD - validate state against whitelist of states
        },

        "spinner": {
          // TBD allow writes if user is a spinner and is matching himself with this shift
          ".validate": "newData.isString() && newData.val().length > 0" // TBD - didn't integrate Spinners yet
        },

        "spinnerRating": {
          ".validate": "newData.isNumber()" // TBD validate against whitelist of 1-5 star ratings
        },

        "$other": { ".validate": false }
      }
    },

    "spinners": {
      ".read": "true",
      ".write": "true",

      "$spinner_id": {
        ".validate": "newData.hasChildren(['firstName', 'lastName'])",

        "firstName": {
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length < 45"
        },

        "lastName": {
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length < 45"
        },

        "spinnerShifts": {
          ".validate": "newData.isBoolean()"
        },

        "$other": { ".validate": false }
      }
    },

    "$other": { ".validate": false }
  }
}
